enum EstadoUser {
  Pendiente
  Autorizado
}

enum EstadoProject {
  Activo
  Inactivo
}

enum Rol {
  usuario
  admin
  lider
  estudiante
}

enum Fase {
  en_desarrollo
  Finalizado
}

type Project {
  _id: ID
  nombre: String
  objetivo_gral: String
  objetivo_espcifico: String
  presupuesto: String
  fase: Fase
  estado: EstadoProject
  people: [User]
}

type User {
  _id: ID!
  nombre: String!
  apellidos: String!
  ciudad: String
  telefono: String!
  email: String!
  password: String!
  rol: Rol
  estado: EstadoUser
}

type Query {
  "Devuelve todos los Proyectos"
  getProjects: [Project]
  "Devolver un Proyecto"
  getProject(id: ID!): Project
  "Devuelve todos los Usuarios"
  getUsers: [User]
  "Devolver un Usuario"
  getUser(id: ID!): User
}

input ProjectInput {
  nombre: String!
  objetivo_gral: String
  objetivo_espcifico: String
  presupuesto: String
  fase: Fase
  estado: EstadoProject
}

input ProjectEditInput {
  nombre: String
  objetivo_gral: String
  objetivo_espcifico: String
  presupuesto: String
  fase: Fase
  estado: EstadoProject
}

input UserInput {
  nombre: String!
  apellidos: String!
  ciudad: String
  telefono: String!
  email: String!
  password: String!
  rol: Rol
  estado: EstadoUser
}

input UserEditInput {
  nombre: String
  apellidos: String
  ciudad: String
  telefono: String
  email: String
  password: String
  rol: Rol
  estado: EstadoUser
}

type Mutation {
  "Crear un proyecto"
  createProject(input: ProjectInput!): Project
  "Edita un proyecto"
  editProject(_id: ID!, input: ProjectEditInput): Project
  "Eliminar Proyecto"
  deleteProject(_id: ID!): Boolean!
  "Crear un Usuario"
  createUser(input: UserInput!): User
  "Edita un Usuario"
  editUser(_id: ID!, input: UserEditInput): User
  "Eliminar un Usuario"
  deleteUser(_id: ID!): Boolean!
  "Adicionar una persona a un proyecto"
  addPeople(projectID: ID!, personID: ID!): Project
}
